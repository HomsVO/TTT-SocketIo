{"version":3,"sources":["components/Grid.jsx","pages/GameRoom.jsx","pages/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Grid","clickOnCell","grid","className","map","row","i","key","cell","k","onClick","socket","io","connect","GameRoom","props","room","match","params","useState","setGrid","turn","setTurn","status","setStatus","end","setEnd","useEffect","emit","on","data","newStatus","rowIndex","elementIndex","Notification","warning","title","duration","description","Main","setRoom","type","value","onChange","e","target","to","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAaeA,G,yBAXF,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,KAExB,OACI,yBAAKC,UAAU,QACVD,EAAKE,KAAI,SAACC,EAAIC,GACX,OAAO,yBAAKC,IAAKD,EAAGH,UAAU,OAAOE,EAAID,KAAI,SAACI,EAAKC,GAAN,OAAY,yBAAKF,IAAKE,EAAGC,QAAS,kBAAIT,EAAYK,EAAEG,IAAIN,UAAU,QAAQK,aCGjIG,EAASC,IAAGC,QAAQ,KA0EXC,MAxEf,SAAkBC,GACd,IAAMC,EAAOD,EAAME,MAAMC,OAAOF,KADX,EAEGG,mBAAS,IAFZ,mBAEdjB,EAFc,KAERkB,EAFQ,OAGGD,qBAHH,mBAGdE,EAHc,KAGRC,EAHQ,OAIOH,qBAJP,mBAIdI,EAJc,KAINC,EAJM,OAKCL,mBAAS,IALV,mBAKdM,EALc,KAKTC,EALS,KA2DvB,OApDEC,qBAAU,WACNhB,EAAOiB,KAAK,OAAQZ,KACtB,IAEFL,EAAOkB,GAAG,iBAAiB,SAACC,GAC1BV,EAAQU,EAAK5B,MACboB,EAAQQ,EAAKT,MACbK,EAAOI,EAAKL,QAGdd,EAAOkB,GAAG,cAAa,SAAEE,GAAF,OAAeP,EAAUO,MA2C9C,yBAAK5B,UAAU,yBACX,uBAAGA,UAAU,WAAb,6EAAsCa,GACtC,uBAAGb,UAAU,WAAb,gBAA2BoB,EAA3B,wBAAyCF,GACzC,4BAAQlB,UAAU,uBAAuBO,QA5C/B,kBAAMC,EAAOiB,KAAK,aA4C5B,8CACCH,GACC,sKAA8BA,GAEhC,kBAAC,EAAD,CAAMvB,KAAMA,EAAMD,YA9CJ,SAAC+B,EAASC,GAC5B,OAAGR,IACW,MAAXF,GACDW,IAAaC,QAAQ,CACnBC,MAAO,mDACPC,SAAU,IACVC,YACI,iJAGC,GAENf,IAAWF,GACZa,IAAaC,QAAQ,CACnBC,MAAO,mDACPC,SAAU,IACVC,YACI,oFAGC,QAELpC,EAAK8B,GAAUC,GAMjBC,IAAaC,QAAQ,CACnBC,MAAO,mDACPC,SAAU,IACVC,YACI,+IATJ3B,EAAOiB,KAAK,WAAY,CACtBvB,IAAI2B,EACJxB,KAAKyB,WC3CFM,MAZf,WAAiB,IAAD,EAEWpB,mBAAS,MAFpB,mBAELH,EAFK,KAEAwB,EAFA,KAGZ,OACI,yBAAKrC,UAAU,8BACX,oJACA,2BAAOsC,KAAK,SAASC,MAAO1B,EAAM2B,SAAU,SAACC,GAAD,OAAKJ,EAAQI,EAAEC,OAAOH,QAAQvC,UAAU,sBACpF,kBAAC,IAAD,CAAMA,UAAW,wBAA4Ba,EAAkB,GAAZ,aAAiB8B,GAAI,SAAW9B,GAAnF,oCCSG+B,MAdf,WAEE,OACE,yBAAK5C,UAAU,OACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,cAAcC,UAAWpC,IAC3C,kBAAC,IAAD,CAAUgC,GAAG,SCAPK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrC,MACvB,2D,OCRNsC,IAASC,OACD,kBAAC,IAAD,KACI,kBAAC,EAAD,OAETC,SAASC,eAAe,SDqHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0a4c5d25.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Grid = ({clickOnCell, grid}) => {\r\n\r\n    return (\r\n        <div className=\"grid\">\r\n            {grid.map((row,i)=>{\r\n                return <div key={i} className=\"row\">{row.map((cell,k)=> (<div key={k} onClick={()=>clickOnCell(i,k)} className=\"cell\">{cell}</div>))}</div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid","import React,{ useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { Notification } from 'rsuite';\r\nimport 'rsuite/dist/styles/rsuite-dark.min.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport { useState } from 'react';\r\nimport Grid from '../components/Grid';\r\n\r\nconst socket = io.connect('/');\r\n\r\nfunction GameRoom(props) {\r\n    const room = props.match.params.room\r\n    const [grid, setGrid] = useState([]);\r\n    const [turn, setTurn] = useState();\r\n    const [status, setStatus] = useState();\r\n    const [end, setEnd] = useState('')\r\n\r\n    useEffect(()=>{\r\n        socket.emit('join', room);\r\n    },[]);\r\n\r\n    socket.on('set:gameState', (data)=>{\r\n      setGrid(data.grid);\r\n      setTurn(data.turn);\r\n      setEnd(data.end)\r\n    });\r\n\r\n    socket.on('set:status',( newStatus )=>setStatus(newStatus));\r\n\r\n    const restart = () => socket.emit('restart');\r\n\r\n    const clickOnCell = (rowIndex,elementIndex) =>{\r\n      if(end) return false;\r\n      if(status === 'S'){\r\n        Notification.warning({\r\n          title: 'Внимание',\r\n          duration: 1000,\r\n          description: (\r\n              <p>Вы всего лишь зритель</p>\r\n          )\r\n        })\r\n        return false;\r\n      } \r\n      if(status !== turn){\r\n        Notification.warning({\r\n          title: 'Внимание',\r\n          duration: 1000,\r\n          description: (\r\n              <p>Не ваш ход</p>\r\n          )\r\n        })\r\n        return false;\r\n      }\r\n      if(!grid[rowIndex][elementIndex]){      \r\n          socket.emit('makeMove', {\r\n            row:rowIndex,\r\n            cell:elementIndex\r\n          });\r\n      }else{\r\n        Notification.warning({\r\n          title: 'Внимание',\r\n          duration: 1000,\r\n          description: (\r\n              <p>Клетка уже заполнена</p>\r\n          )\r\n        })\r\n      }\r\n    }\r\n\r\n  return (\r\n      <div className=\"container text-center\">\r\n          <p className=\"h4 mb-3\">Комната номер {room}</p>\r\n          <p className=\"h5 mb-2\">Вы {status}, Ход {turn}</p>\r\n          <button className=\"btn btn-success my-2\" onClick={restart}>Рестарт</button>\r\n          {end && \r\n            <p>Игра окончена, победитель {end}</p>\r\n          }\r\n          <Grid grid={grid} clickOnCell={clickOnCell} />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default GameRoom;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Main() {\r\n\r\n    const [room,setRoom] = useState(null);\r\n    return (\r\n        <div className=\"container mt-5 text-center\">\r\n            <h1>Введите номер комнаты</h1>\r\n            <input type=\"number\" value={room} onChange={(e)=>setRoom(e.target.value)} className=\"form-control mt-2\"/>\r\n            <Link className={\"btn btn-success mt-3\" + ((!room)?\" disabled\":\"\")} to={'/room/' + room} >Войти</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport GameRoom from './pages/GameRoom';\nimport Main from './pages/Main';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n          <Switch>\n              <Route exact path='/' component={Main} />\n              <Route exact path='/room/:room' component={GameRoom} />\n              <Redirect to=\"/\" />\n          </Switch>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\n\nReactDOM.render(\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n , document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}